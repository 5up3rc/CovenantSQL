/*
 * Copyright 2018 The ThunderDB Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by mockery v1.0.0. DO NOT EDIT.
package kayak

import mock "github.com/stretchr/testify/mock"

// MockRunner is an autogenerated mock type for the Runner type
type MockRunner struct {
	mock.Mock
}

// Init provides a mock function with given fields: config, peers, logs, stable, transport
func (_m *MockRunner) Init(config Config, peers *Peers, logs LogStore, stable StableStore, transport Transport) error {
	ret := _m.Called(config, peers, logs, stable, transport)

	var r0 error
	if rf, ok := ret.Get(0).(func(Config, *Peers, LogStore, StableStore, Transport) error); ok {
		r0 = rf(config, peers, logs, stable, transport)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Apply provides a mock function with given fields: data
func (_m *MockRunner) Apply(data []byte) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: wait
func (_m *MockRunner) Shutdown(wait bool) error {
	ret := _m.Called(wait)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(wait)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePeers provides a mock function with given fields: peers
func (_m *MockRunner) UpdatePeers(peers *Peers) error {
	ret := _m.Called(peers)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Peers) error); ok {
		r0 = rf(peers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
